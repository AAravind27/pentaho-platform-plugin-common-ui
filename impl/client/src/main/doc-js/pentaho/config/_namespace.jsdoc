/*!
 * Copyright 2010 - 2017 Pentaho Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The `config` namespace contains the types of the **Pentaho Configuration API**.
 *
 * ## Overview
 *
 * The Configuration API provides a means for _types_ to be configured by third-parties.
 * _Types_ are known by their _string_ identifier and are, for all other purposes, opaque entities
 * — these may or may not exist as actual classes, or may simply represent an interface type.
 *
 * A configuration is a set of configuration rules, represented by the
 * [IRuleSet]{@link pentaho.config.IRuleSet} and
 * [IRule]{@link pentaho.config.IRule}
 * interfaces, respectively.
 * Each rule specifies the _type_ and the values of any
 * [Pentaho environmental variables]{@link pentaho.context.IContext}
 * to which it applies,
 * as well as the actual configuration properties that should be applied.
 *
 * Configuration modules — AMD/RequireJS modules that return an instance of
 * [IRuleSet]{@link pentaho.config.spec.IRuleSet}
 * — must be advertised to {@link pentaho/system}, using the service id `pentaho.config.spec.IRuleSet`,
 * to be visible to the configuration system.
 *
 * The configuration system merges multiple configurations that target the same type.
 *
 * Configurations can be obtained (and also registered)
 * through the [config.IService]{@link pentaho.config.IService} interface.
 *
 * The Pentaho Platform's main configuration service instance can be obtained
 * by getting the service of id `pentaho.config.IService`,
 * i.e., by requiring the AMD/RequireJS module `pentaho/service!pentaho.config.IService?single`.
 * Example:
 *
 * ```js
 * require([
 *   "pentaho/service!pentaho.config.IService?single"
 * ], function(configService) {
 *
 *   // Get the configuration for 'my.IFoo' components,
 *   // under the main Pentaho environment:
 *   var config = configService.select("my.IFoo");
 *   if(config) {
 *     // ...
 *   }
 * });
 * ```
 *
 * @name pentaho.config
 * @namespace
 */
